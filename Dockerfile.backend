# Multi-stage Docker build f√ºr optimale Performance
FROM python:3.11-slim as builder

# Optional: use lightweight requirements in Free-Tier builds
ARG USE_LITE=0

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY backend/requirements.txt backend/requirements-lite.txt ./

# Install Python dependencies (lite set when USE_LITE=1)
RUN if [ "$USE_LITE" = "1" ]; then \
      echo "Installing lightweight requirements (requirements-lite.txt)" && \
      pip install --no-cache-dir -r requirements-lite.txt ; \
    else \
      echo "Installing full requirements (requirements.txt)" && \
      pip install --no-cache-dir -r requirements.txt ; \
    fi

# Production stage
FROM python:3.11-slim

# Create non-root user
RUN groupadd -r forensics && useradd -r -g forensics forensics

# Set working directory
WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libffi8 \
    libssl3 \
    libxml2 \
    libxslt1.1 \
    zlib1g \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY backend/ ./backend/
COPY scripts/ ./scripts/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/temp && \
    chown -R forensics:forensics /app

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LOG_LEVEL=INFO \
    PORT=8000

# Switch to non-root user
USER forensics

# Health check (use $PORT for PaaS compatibility)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/api/healthz || exit 1

# Expose port (default 8000, Render uses $PORT)
EXPOSE 8000

# Start command using shell form to expand $PORT
CMD python -m uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers 4
