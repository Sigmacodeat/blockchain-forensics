services:
  # Message Broker
  zookeeper:
    platform: "linux/amd64"
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - forensics-network

  kafka:
    platform: "linux/amd64"
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - forensics-network

  schema-registry:
    platform: "linux/amd64"
    image: confluentinc/cp-schema-registry:7.5.0
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9093
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8081/subjects || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - forensics-network

  # Graph Database
  neo4j:
    platform: "linux/amd64"
    image: neo4j:5.15-community
    ports:
      - "7475:7474"  # HTTP (7474 bereits belegt)
      - "7688:7687"  # Bolt (7687 evtl. belegt)
    environment:
      NEO4J_AUTH: neo4j/forensics_password_change_me
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/import
      - neo4j-plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p forensics_password_change_me 'RETURN 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - forensics-network

  # Timeseries Database
  postgres:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "5435:5432"  # External 5435 (5432/5433/5434 bereits belegt)
    environment:
      POSTGRES_DB: blockchain_forensics
      POSTGRES_USER: forensics
      POSTGRES_PASSWORD: forensics_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forensics -d blockchain_forensics"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - forensics-network

  # Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6381:6379"  # External 6381 (6379/6380 bereits belegt)
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - forensics-network

  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/healthz || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 40s
    restart: unless-stopped
    networks:
      - forensics-network

  # ML Model Container (PyTorch + XGBoost)
  ml-service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      POSTGRES_URL: postgresql://forensics:forensics_pass@postgres:5432/blockchain_forensics
      MODEL_PATH: /app/models
    volumes:
      - ./ml:/app
      - ml-models:/app/models
    networks:
      - forensics-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - .env
    environment:
      ENABLE_AI_AGENTS: "true"
      ENABLE_AGENT_TOOL_RBAC: ${ENABLE_AGENT_TOOL_RBAC:-false}
      ENABLE_KAFKA_STREAMING: "true"
      DISABLE_SECURITY: ${DISABLE_SECURITY:-0}
      IGNORE_DOTENV: "1"
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      OAUTH_CALLBACK_PATH: ${OAUTH_CALLBACK_PATH:-/api/v1/auth/oauth/google/callback}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: forensics_password_change_me
      POSTGRES_URL: postgresql://forensics:forensics_pass@postgres:5432/blockchain_forensics
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      PYTHONPATH: /app:/app/backend
      CORS_ORIGINS: '["http://localhost:3000","http://localhost:5173","http://localhost:8000","*"]'
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys,urllib.request\ntry:\n  urllib.request.urlopen('http://localhost:8000/api/healthz', timeout=2).read()\n  sys.exit(0)\nexcept Exception as e:\n  sys.exit(1)\nPY"]
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - forensics-network

  # KYT Monitor Worker (lokal deaktiviert)
  # monitor-worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_started
  #   environment:
  #     POSTGRES_URL: postgresql://forensics:forensics_pass@postgres:5432/blockchain_forensics
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:9093
  #     SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
  #   volumes:
  #     - ./backend:/app
  #   command: python -m app.workers.monitor_worker
  #   networks:
  #     - forensics-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_started
    environment:
      VITE_API_URL: http://backend:8000
    restart: unless-stopped
    networks:
      - forensics-network

  # Monitoring: Prometheus
  prometheus:
    platform: "linux/amd64"
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/alerts.yml
      - ./monitoring/prometheus-recording-rules.yml:/etc/prometheus/recording-rules.yml
      - prometheus-data:/prometheus
    # depends_on:
    #   backend:
    #     condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - forensics-network

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3003:3000"  # Grafana auf 3003 wegen Frontend auf 3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/blockchain-forensics.json
      - ./monitoring/grafana-dashboard-agent.json:/etc/grafana/provisioning/dashboards/blockchain-forensics-agent.json
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - forensics-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
  postgres-data:
  redis-data:
  qdrant-data:
  ml-models:
  prometheus-data:
  grafana-data:
  loki_data:
    driver: local
  forensics_logs:
    driver: local

networks:
  forensics-network:
    driver: bridge
