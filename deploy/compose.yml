services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks: [ forensics-network ]

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on: [ zookeeper ]
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks: [ forensics-network ]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    depends_on: [ kafka ]
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks: [ forensics-network ]

  neo4j:
    image: neo4j:5.15-community
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/forensics_password_change_me}
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/import
      - neo4j-plugins:/plugins
    networks: [ forensics-network ]

  postgres:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: blockchain_forensics
      POSTGRES_USER: forensics
      POSTGRES_PASSWORD: forensics_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks: [ forensics-network ]

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks: [ forensics-network ]

  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks: [ forensics-network ]

  backend:
    image: ghcr.io/${GH_OWNER}/${GH_REPO}-backend:${TAG:-latest}
    depends_on:
      - postgres
      - redis
      - neo4j
      - kafka
      - qdrant
    environment:
      ENABLE_AI_AGENTS: "true"
      ENABLE_AGENT_TOOL_RBAC: ${ENABLE_AGENT_TOOL_RBAC:-false}
      ENABLE_KAFKA_STREAMING: "true"
      DISABLE_SECURITY: ${DISABLE_SECURITY:-0}
      IGNORE_DOTENV: "1"
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-forensics_password_change_me}
      POSTGRES_URL: postgresql://forensics:${POSTGRES_PASSWORD:-forensics_pass}@postgres:5432/blockchain_forensics
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      OAUTH_CALLBACK_PATH: ${OAUTH_CALLBACK_PATH:-/api/v1/auth/oauth/google/callback}
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info
    networks: [ forensics-network ]

  frontend:
    image: ghcr.io/${GH_OWNER}/${GH_REPO}-frontend:${TAG:-latest}
    environment:
      VITE_API_URL: http://backend:8000
    ports:
      - "3000:80"
    depends_on: [ backend ]
    networks: [ forensics-network ]

  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks: [ forensics-network ]

  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on: [ prometheus ]
    networks: [ forensics-network ]

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks: [ forensics-network ]

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
  postgres-data:
  redis-data:
  qdrant-data:
  prometheus-data:
  grafana-data:

networks:
  forensics-network:
    driver: bridge
