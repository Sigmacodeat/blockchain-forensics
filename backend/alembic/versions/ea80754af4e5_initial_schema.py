"""initial_schema

Revision ID: ea80754af4e5
Revises: 
Create Date: 2025-10-14 12:18:30.658239

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ea80754af4e5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('alert_annotations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('alert_id', sa.String(length=128), nullable=False),
    sa.Column('disposition', sa.String(length=32), nullable=True),
    sa.Column('event_time', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alert_annotations_alert_id'), 'alert_annotations', ['alert_id'], unique=False)
    op.create_index('ix_alert_annotations_updated_at', 'alert_annotations', ['updated_at'], unique=False)
    # Align with existing UUID schema for cases and dependent tables
    op.add_column('cases', sa.Column('case_id', sa.String(length=255), nullable=True))
    op.add_column('cases', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('cases', sa.Column('assignee_id', sa.String(length=255), nullable=True))
    op.add_column('cases', sa.Column('assigned_at', sa.DateTime(), nullable=True))
    op.add_column('cases', sa.Column('created_by', sa.String(length=255), nullable=False))
    op.add_column('cases', sa.Column('closed_at', sa.DateTime(), nullable=True))
    op.add_column('cases', sa.Column('category', sa.String(length=100), nullable=True))
    # Keep cases.id as UUID (align with existing init.sql)
    op.alter_column('cases', 'title',
               existing_type=sa.VARCHAR(length=256),
               type_=sa.String(length=500),
               existing_nullable=False)
    op.alter_column('cases', 'status',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.Enum('OPEN', 'IN_PROGRESS', 'ON_HOLD', 'CLOSED', 'ARCHIVED', name='casestatus'),
               nullable=True,
               existing_server_default=sa.text("'open'::character varying"))
    op.alter_column('cases', 'priority',
               existing_type=sa.VARCHAR(length=16),
               type_=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='casepriority'),
               nullable=True,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('cases', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_cases_owner', table_name='cases')
    op.drop_index('idx_cases_status', table_name='cases')
    op.create_index(op.f('ix_cases_case_id'), 'cases', ['case_id'], unique=True)
    op.create_index(op.f('ix_cases_id'), 'cases', ['id'], unique=False)
    op.drop_constraint('cases_owner_fkey', 'cases', type_='foreignkey')
    op.drop_column('cases', 'owner')
    op.create_table('case_attachments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('filename', sa.String(length=500), nullable=False),
    sa.Column('file_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_uri', sa.String(length=1000), nullable=False),
    sa.Column('file_hash', sa.String(length=255), nullable=False),
    sa.Column('hash_algorithm', sa.String(length=50), nullable=True),
    sa.Column('uploaded_by', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_evidence', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_attachments_id'), 'case_attachments', ['id'], unique=False)
    op.create_table('case_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('event_description', sa.String(length=500), nullable=False),
    sa.Column('event_payload', sa.JSON(), nullable=True),
    sa.Column('triggered_by', sa.String(length=255), nullable=False),
    sa.Column('triggered_by_name', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_events_id'), 'case_events', ['id'], unique=False)
    op.create_table('case_notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('case_id', sa.UUID(), nullable=False),
    sa.Column('author_id', sa.String(length=255), nullable=False),
    sa.Column('author_name', sa.String(length=255), nullable=False),
    sa.Column('note_text', sa.Text(), nullable=False),
    sa.Column('is_internal', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_notes_id'), 'case_notes', ['id'], unique=False)
    op.drop_index('idx_trace_created', table_name='trace_jobs')
    op.drop_index('idx_trace_status', table_name='trace_jobs')
    op.drop_table('trace_jobs')
    op.drop_index('idx_monitor_alert_events_alert', table_name='monitor_alert_events')
    op.drop_index('idx_monitor_alert_events_type', table_name='monitor_alert_events')
    op.drop_table('monitor_alert_events')
    op.drop_index('idx_alert_created', table_name='alerts')
    op.drop_index('idx_alert_severity', table_name='alerts')
    op.drop_index('idx_alert_type', table_name='alerts')
    op.drop_table('alerts')
    op.drop_index('idx_monitor_rules_enabled', table_name='monitor_rules')
    op.drop_index('idx_monitor_rules_scope', table_name='monitor_rules')
    op.drop_table('monitor_rules')
    op.drop_index('ux_evidence_case_hash', table_name='evidence')
    op.drop_table('evidence')
    op.drop_index('audit_log_timestamp_idx', table_name='audit_log')
    op.drop_index('idx_audit_action', table_name='audit_log')
    op.drop_index('idx_audit_user', table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index('idx_label_address', table_name='labels')
    op.drop_index('idx_label_category', table_name='labels')
    op.drop_table('labels')
    op.drop_index('idx_risk_address', table_name='risk_scores')
    op.drop_index('risk_scores_timestamp_idx', table_name='risk_scores')
    op.drop_table('risk_scores')
    op.drop_index('idx_monitor_alerts_entity', table_name='monitor_alerts')
    op.drop_index('idx_monitor_alerts_rule', table_name='monitor_alerts')
    op.drop_index('idx_monitor_alerts_severity', table_name='monitor_alerts')
    op.drop_index('idx_monitor_alerts_status', table_name='monitor_alerts')
    op.drop_index('ux_monitor_alert', table_name='monitor_alerts')
    op.drop_table('monitor_alerts')
    op.drop_index('idx_case_items_case', table_name='case_items')
    op.drop_index('idx_case_items_type', table_name='case_items')
    op.drop_table('case_items')
    op.drop_table('users')
    op.drop_index('idx_block_number', table_name='transactions')
    op.drop_index('idx_cluster_id', table_name='transactions')
    op.drop_index('idx_from_address', table_name='transactions')
    op.drop_index('idx_to_address', table_name='transactions')
    op.drop_index('idx_tx_hash', table_name='transactions')
    op.drop_index('transactions_timestamp_idx', table_name='transactions')
    op.drop_table('transactions')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cases', sa.Column('owner', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('cases_owner_fkey', 'cases', 'users', ['owner'], ['id'])
    op.drop_index(op.f('ix_cases_id'), table_name='cases')
    op.drop_index(op.f('ix_cases_case_id'), table_name='cases')
    op.create_index('idx_cases_status', 'cases', ['status'], unique=False)
    op.create_index('idx_cases_owner', 'cases', ['owner'], unique=False)
    op.alter_column('cases', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('cases', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'priority',
               existing_type=sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='casepriority'),
               type_=sa.VARCHAR(length=16),
               nullable=False,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('cases', 'status',
               existing_type=sa.Enum('OPEN', 'IN_PROGRESS', 'ON_HOLD', 'CLOSED', 'ARCHIVED', name='casestatus'),
               type_=sa.VARCHAR(length=32),
               nullable=False,
               existing_server_default=sa.text("'open'::character varying"))
    op.alter_column('cases', 'title',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=256),
               existing_nullable=False)
    # Keep cases.id as UUID in downgrade as well; no type change
    op.drop_column('cases', 'category')
    op.drop_column('cases', 'closed_at')
    op.drop_column('cases', 'created_by')
    op.drop_column('cases', 'assigned_at')
    op.drop_column('cases', 'assignee_id')
    op.drop_column('cases', 'description')
    op.drop_column('cases', 'case_id')
    op.create_table('transactions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('tx_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=False),
    sa.Column('block_number', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('from_address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('to_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('value', sa.NUMERIC(precision=78, scale=0), autoincrement=False, nullable=True),
    sa.Column('gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gas_price', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('chain', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('cluster_id', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', 'timestamp', name='transactions_pkey')
    )
    op.create_index('transactions_timestamp_idx', 'transactions', [sa.text('timestamp DESC')], unique=False)
    op.create_index('idx_tx_hash', 'transactions', ['tx_hash'], unique=False)
    op.create_index('idx_to_address', 'transactions', ['to_address'], unique=False)
    op.create_index('idx_from_address', 'transactions', ['from_address'], unique=False)
    op.create_index('idx_cluster_id', 'transactions', ['cluster_id'], unique=False)
    op.create_index('idx_block_number', 'transactions', ['block_number'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=32), server_default=sa.text("'analyst'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('case_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('case_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('item_type', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actor', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['actor'], ['users.id'], name='case_items_actor_fkey'),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name='case_items_case_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='case_items_pkey')
    )
    op.create_index('idx_case_items_type', 'case_items', ['item_type'], unique=False)
    op.create_index('idx_case_items_case', 'case_items', ['case_id'], unique=False)
    op.create_table('monitor_alerts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('chain', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=16), server_default=sa.text("'open'::character varying"), autoincrement=False, nullable=False),
    sa.Column('assignee', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('first_seen_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_seen_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('hits', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sla_due_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignee'], ['users.id'], name='monitor_alerts_assignee_fkey'),
    sa.ForeignKeyConstraint(['rule_id'], ['monitor_rules.id'], name='monitor_alerts_rule_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='monitor_alerts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ux_monitor_alert', 'monitor_alerts', ['rule_id', 'entity_type', 'entity_id'], unique=True)
    op.create_index('idx_monitor_alerts_status', 'monitor_alerts', ['status'], unique=False)
    op.create_index('idx_monitor_alerts_severity', 'monitor_alerts', ['severity'], unique=False)
    op.create_index('idx_monitor_alerts_rule', 'monitor_alerts', ['rule_id'], unique=False)
    op.create_index('idx_monitor_alerts_entity', 'monitor_alerts', ['entity_type', 'entity_id'], unique=False)
    op.create_table('risk_scores',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=False),
    sa.Column('risk_category', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', 'timestamp', name='risk_scores_pkey')
    )
    op.create_index('risk_scores_timestamp_idx', 'risk_scores', [sa.text('timestamp DESC')], unique=False)
    op.create_index('idx_risk_address', 'risk_scores', ['address'], unique=False)
    op.create_table('labels',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='labels_pkey')
    )
    op.create_index('idx_label_category', 'labels', ['category'], unique=False)
    op.create_index('idx_label_address', 'labels', ['address'], unique=False)
    op.create_table('audit_log',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_log_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'timestamp', name='audit_log_pkey')
    )
    op.create_index('idx_audit_user', 'audit_log', ['user_id'], unique=False)
    op.create_index('idx_audit_action', 'audit_log', ['action'], unique=False)
    op.create_index('audit_log_timestamp_idx', 'audit_log', [sa.text('timestamp DESC')], unique=False)
    op.create_table('evidence',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('case_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sha256', sa.CHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('signature', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['case_id'], ['cases.id'], name='evidence_case_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='evidence_pkey')
    )
    op.create_index('ux_evidence_case_hash', 'evidence', ['case_id', 'sha256'], unique=True)
    op.create_table('monitor_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('scope', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=32), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False),
    sa.Column('expression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='monitor_rules_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_monitor_rules_scope', 'monitor_rules', ['scope'], unique=False)
    op.create_index('idx_monitor_rules_enabled', 'monitor_rules', ['enabled'], unique=False)
    op.create_table('alerts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('tx_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('acknowledged', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='alerts_pkey')
    )
    op.create_index('idx_alert_type', 'alerts', ['alert_type'], unique=False)
    op.create_index('idx_alert_severity', 'alerts', ['severity'], unique=False)
    op.create_index('idx_alert_created', 'alerts', [sa.text('created_at DESC')], unique=False)
    op.create_table('monitor_alert_events',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('alert_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('actor', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['actor'], ['users.id'], name='monitor_alert_events_actor_fkey'),
    sa.ForeignKeyConstraint(['alert_id'], ['monitor_alerts.id'], name='monitor_alert_events_alert_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='monitor_alert_events_pkey')
    )
    op.create_index('idx_monitor_alert_events_type', 'monitor_alert_events', ['type'], unique=False)
    op.create_index('idx_monitor_alert_events_alert', 'monitor_alert_events', ['alert_id'], unique=False)
    op.create_table('trace_jobs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('start_address', sa.VARCHAR(length=42), autoincrement=False, nullable=False),
    sa.Column('max_depth', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('taint_model', sa.VARCHAR(length=32), server_default=sa.text("'proportional'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='trace_jobs_pkey')
    )
    op.create_index('idx_trace_status', 'trace_jobs', ['status'], unique=False)
    op.create_index('idx_trace_created', 'trace_jobs', [sa.text('created_at DESC')], unique=False)
    op.drop_index(op.f('ix_case_notes_id'), table_name='case_notes')
    op.drop_table('case_notes')
    op.drop_index(op.f('ix_case_events_id'), table_name='case_events')
    op.drop_table('case_events')
    op.drop_index(op.f('ix_case_attachments_id'), table_name='case_attachments')
    op.drop_table('case_attachments')
    op.drop_index('ix_alert_annotations_updated_at', table_name='alert_annotations')
    op.drop_index(op.f('ix_alert_annotations_alert_id'), table_name='alert_annotations')
    op.drop_table('alert_annotations')
    # ### end Alembic commands ###
