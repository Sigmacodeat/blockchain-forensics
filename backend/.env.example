# Application
APP_NAME="Blockchain Forensics Platform"
VERSION="0.1.0"
DEBUG=true

# Test/Offline Mode
# When set to 1, backend avoids external service connections (Neo4j/Redis etc.)
# and uses offline-safe code paths for tests/CI.
TEST_MODE=0

# Security (IMPORTANT: Generate secure keys for production!)
SECRET_KEY="change_this_to_random_256_bit_string_PRODUCTION_MUST_BE_SECURE"
JWT_SECRET="change_this_to_random_256_bit_string"
JWT_ALGORITHM="HS256"
JWT_EXPIRATION_MINUTES=60

# CORS
CORS_ORIGINS='["http://localhost:3000", "http://localhost:5173", "http://localhost:8000"]'

# Google OAuth (Optional - für Social Login)
GOOGLE_CLIENT_ID="your_google_client_id_here"
GOOGLE_CLIENT_SECRET="your_google_client_secret_here"
OAUTH_CALLBACK_PATH="/api/v1/auth/oauth/google/callback"

# Blockchain RPC
ETHEREUM_RPC_URL="https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY"
ETHEREUM_WS_URL="wss://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY"
ETHEREUM_ARCHIVE_NODE=""
SOLANA_RPC_URL="https://api.mainnet-beta.solana.com"
BITCOIN_RPC_URL="http://localhost:8332"
BITCOIN_RPC_USER="user"
BITCOIN_RPC_PASSWORD="password"

# Neo4j
NEO4J_URI="bolt://localhost:7687"
NEO4J_USER="neo4j"
NEO4J_PASSWORD="your-neo4j-password"

# PostgreSQL (TimescaleDB)
POSTGRES_URL="postgresql://user:password@localhost:5432/blockchain_forensics"

# Redis
REDIS_URL="redis://localhost:6379/0"

# Qdrant (Vector DB)
QDRANT_URL="http://localhost:6333"

# Kafka
KAFKA_BOOTSTRAP_SERVERS="localhost:9092"
KAFKA_SCHEMA_REGISTRY_URL="http://localhost:8081"
KAFKA_DLQ_TOPIC="dlq.events"

# AI Services
OPENAI_API_KEY="sk-your-openai-api-key"
ANTHROPIC_API_KEY=""
OPENAI_MODEL="gpt-4-turbo-preview"
EMBEDDING_MODEL="text-embedding-3-large"

# ML Models
ML_MODEL_PATH="/app/models"
XGBOOST_MODEL_PATH="/app/models/risk_classifier.json"

# External APIs
ETHERSCAN_API_KEY="your-etherscan-api-key"
OFAC_SANCTIONS_URL="https://sanctionslistservice.ofac.treas.gov/api/PublicationPreview/exports/ADVANCED.CSV"

# Service Ports
BACKEND_PORT=8000
FRONTEND_PORT=3000

# Tracing Configuration
MAX_TRACE_DEPTH=10
MAX_NODES_PER_TRACE=10000
TAINT_MODEL="proportional"
MIN_TAINT_THRESHOLD=0.01

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# Logging
LOG_LEVEL="INFO"
SENTRY_DSN=""

# Feature Flags
ENABLE_ML_CLUSTERING=true
ENABLE_CROSS_CHAIN=false
ENABLE_AI_AGENTS=true
ENABLE_ANALYTICS=1
ANALYTICS_IP_SALT="change-me-random-salt"

# Analytics Provider (optional; if using PostHog self-hosted)
POSTHOG_HOST=""
POSTHOG_PROJECT_KEY=""

# Solana RPC Robustness
# Timeouts/Retries/Backoff for Solana JSON-RPC adapter
SOL_RPC_TIMEOUT_SECS=20
SOL_RPC_MAX_RETRIES=5
SOL_RPC_BASE_DELAY_MS=250
SOL_RPC_MAX_DELAY_MS=5000

GOOGLE_CLIENT_ID="your_google_client_id_here"
GOOGLE_CLIENT_SECRET="your_google_client_secret_here"
OAUTH_CALLBACK_PATH="/api/v1/auth/oauth/google/callback"

# Chatbot / LLM
LLM_PROVIDER="anthropic" # or openai
LLM_MODEL="claude-3-5-sonnet-20240620"
CHAT_MAX_TOKENS=2048
EMBEDDINGS_PROVIDER="openai"
VECTORDB_URL=""

# Analytics retention (days)
ANALYTICS_RETENTION_DAYS=365

# ==========================
# NewsCase (Public Watcher)
# ==========================
# Optional: Auto-Trace bei neuen Events (best-effort, Neo4j erforderlich)
ENABLE_NEWSCASE_AUTOTRACE=0
# Scan-Intervall in Sekunden (standard 10)
NEWSCASE_WATCH_INTERVAL=10
# Backlog-Größe pro Slug (Anzahl letzter Events, standard 200)
NEWSCASE_BACKLOG_SIZE=200
# Wenn keine WS-Clients verbunden sind: pausieren (1=ja, 0=nein)
NEWSCASE_PAUSE_WHEN_NO_CLIENT=1
