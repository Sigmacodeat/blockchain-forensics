name: Blockchain Forensics CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # OpenAPI validation
  openapi-validate:
    name: OpenAPI Validate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Validate OpenAPI spec
      run: |
        docker run --rm -v "${{ github.workspace }}":/local openapitools/openapi-generator-cli validate \
          -i /local/backend/docs/openapi.yaml

  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install black flake8 mypy pytest

    - name: Lint with flake8
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: black --check --diff backend/

    - name: Type check with mypy
      run: mypy backend/ --ignore-missing-imports

    - name: Run tests (backend fast subset)
      run: |
        pytest \
          backend/tests/test_policy_v2_conditions.py \
          backend/tests/test_correlation_severity_rank.py \
          backend/tests/test_alerts_api_auth.py \
          backend/tests/test_alert_engine_suppression.py \
          backend/tests/test_agent_tools_simulate.py \
          -v --cov=backend --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Build and Test
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: i18n keys report (fail on missing)
      run: node scripts/i18n-report.mjs en

    - name: Install dependencies
      run: npm ci
      working-directory: frontend

    - name: i18n check (frontend allowlist)
      run: npm run i18n:check
      working-directory: frontend

    - name: Run linter
      run: npm run lint
      working-directory: frontend

    - name: Run tests
      run: npm run test
      working-directory: frontend

    - name: Build application
      run: npm run build
      working-directory: frontend

    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      working-directory: frontend

    - name: Run E2E tests (Playwright)
      run: npm run test:e2e
      working-directory: frontend

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [quality, frontend, security, sdk]
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-{{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        sed -i 's|your-registry/forensics-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}-backend|g' infra/kubernetes/staging/*.yaml
        sed -i 's|your-registry/forensics-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}-frontend|g' infra/kubernetes/staging/*.yaml

        # Apply Kubernetes manifests
        kubectl apply -f infra/kubernetes/staging/

        # Wait for rollout to complete
        kubectl rollout status deployment/forensics-backend -n blockchain-forensics-staging
        kubectl rollout status deployment/forensics-frontend -n blockchain-forensics-staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Run database migrations
      run: |
        # Run any pending migrations
        kubectl exec deployment/forensics-backend -n blockchain-forensics -- python -m alembic upgrade head

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        sed -i 's|your-registry/forensics-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-backend|g' infra/kubernetes/production/*.yaml
        sed -i 's|your-registry/forensics-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-frontend|g' infra/kubernetes/production/*.yaml

        # Apply Kubernetes manifests
        kubectl apply -f infra/kubernetes/production/

        # Wait for rollout to complete
        kubectl rollout status deployment/forensics-backend -n blockchain-forensics
        kubectl rollout status deployment/forensics-frontend -n blockchain-forensics


    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        artillery run infra/testing/load-test.yml

    - name: Run stress tests
      run: |
        artillery run infra/testing/stress-test.yml

  # SDK generation from OpenAPI
  sdk:
    name: SDK Generation
    runs-on: ubuntu-latest
    needs: openapi-validate
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx (for stable docker env)
      uses: docker/setup-buildx-action@v3
    - name: Generate TypeScript SDK
      run: |
        docker run --rm -v "${{ github.workspace }}":/local openapitools/openapi-generator-cli generate \
          -i /local/backend/docs/openapi.yaml \
          -g typescript-fetch \
          -o /local/docs/sdk/typescript \
          --additional-properties=supportsES6=true,typescriptThreePlus=true
    - name: Generate Python SDK
      run: |
        docker run --rm -v "${{ github.workspace }}":/local openapitools/openapi-generator-cli generate \
          -i /local/backend/docs/openapi.yaml \
          -g python \
          -o /local/docs/sdk/python \
          --additional-properties=packageName=blockchain_forensics_sdk
    - name: Upload SDK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sdk-artifacts
        path: |
          docs/sdk/typescript/**
          docs/sdk/python/**

  # Integration Tests
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://staging-api.your-domain.com/health
        curl -f http://staging-api.your-domain.com/api/v1/system/health

        # Test database connectivity
        # Add more integration tests as needed

  # Smoke Tests
  smoke-test:
    name: Smoke Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Run smoke tests
      run: |
        # Basic health checks
        curl -f https://your-domain.com/health
        curl -f https://your-domain.com/api/v1/system/health

        # Test critical user flows
        # Add smoke tests for key functionality
