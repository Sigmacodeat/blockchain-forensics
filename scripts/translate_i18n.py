#!/usr/bin/env python3
"""
Automatisches √úbersetzungs-Script f√ºr i18n JSON-Dateien
Ersetzt englische/deutsche Texte mit √úbersetzungen in der Zielsprache
"""

import json
import os
from pathlib import Path

# Mapping der englischen Keys zu √úbersetzungen pro Sprache
TRANSLATIONS = {
    # Serbisch (Kyrillisch)
    "sr": {
        "Coming soon": "–£—Å–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ",
        "This feature is still under development.": "–û–≤–∞ —Ñ—É–Ω–∫—Ü–∏—ò–∞ —ò–µ —ò–æ—à —É —Ä–∞–∑–≤–æ—ò—É.",
        "Learn more": "–°–∞–∑–Ω–∞—ò –≤–∏—à–µ",
        "Welcome back": "–î–æ–±—Ä–æ–¥–æ—à–ª–∏ –Ω–∞–∑–∞–¥",
        "Overview": "–ü—Ä–µ–≥–ª–µ–¥",
        "Recent Activity": "–ù–µ–¥–∞–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "Quick Actions": "–ë—Ä–∑–µ –∞–∫—Ü–∏—ò–µ",
        "Statistics": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
        "Notifications": "–û–±–∞–≤–µ—à—Ç–µ—ö–∞",
        "Active Cases": "–ê–∫—Ç–∏–≤–Ω–∏ —Å–ª—É—á–∞—ò–µ–≤–∏",
        "Traces Today": "–ü—Ä–∞—õ–µ—ö–∞ –¥–∞–Ω–∞—Å",
        "Alerts": "–£–ø–æ–∑–æ—Ä–µ—ö–∞",
        "Uptime": "–í—Ä–µ–º–µ —Ä–∞–¥–∞",
        "Live Alerts": "–£–ø–æ–∑–æ—Ä–µ—ö–∞ —É–∂–∏–≤–æ",
        "All Alerts": "–°–≤–∞ —É–ø–æ–∑–æ—Ä–µ—ö–∞",
        "Trend Analysis": "–ê–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤–∞",
        "Detailed Analytics": "–î–µ—Ç–∞—ô–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "Analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "How can I help?": "–ö–∞–∫–æ –º–æ–≥—É –¥–∞ –ø–æ–º–æ–≥–Ω–µ–º?",
        "Risk Level": "–ù–∏–≤–æ —Ä–∏–∑–∏–∫–∞",
        "Voice Input (43 Languages)": "–ì–ª–∞—Å–æ–≤–Ω–∏ —É–Ω–æ—Å (43 —ò–µ–∑–∏–∫–∞)",
        "Funding Rate": "–°—Ç–æ–ø–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞—ö–∞",
    },
    # Weitere Sprachen k√∂nnen hier hinzugef√ºgt werden
}

def translate_json_file(file_path: Path, lang_code: str):
    """√úbersetzt englische Texte in einer JSON-Datei"""
    
    if lang_code not in TRANSLATIONS:
        print(f"‚ö†Ô∏è  Keine √úbersetzungen f√ºr {lang_code} definiert")
        return
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    translations = TRANSLATIONS[lang_code]
    changes = 0
    
    def translate_recursive(obj):
        nonlocal changes
        if isinstance(obj, dict):
            for key, value in obj.items():
                if isinstance(value, str) and value in translations:
                    obj[key] = translations[value]
                    changes += 1
                elif isinstance(value, (dict, list)):
                    translate_recursive(value)
        elif isinstance(obj, list):
            for item in obj:
                translate_recursive(item)
    
    translate_recursive(data)
    
    if changes > 0:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ {file_path.name}: {changes} √úbersetzungen")
    else:
        print(f"‚è≠Ô∏è  {file_path.name}: Keine √Ñnderungen")

def main():
    locales_dir = Path(__file__).parent.parent / "frontend" / "src" / "locales"
    
    if not locales_dir.exists():
        print(f"‚ùå Verzeichnis nicht gefunden: {locales_dir}")
        return
    
    # Alle JSON-Dateien verarbeiten
    for json_file in locales_dir.glob("*.json"):
        lang_code = json_file.stem
        
        # Skip English und German
        if lang_code in ["en", "de", "fr"]:
            continue
        
        print(f"\nüîÑ Verarbeite {lang_code}...")
        translate_json_file(json_file, lang_code)

if __name__ == "__main__":
    main()
